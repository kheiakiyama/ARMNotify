{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "appName": {
      "type": "string",
      "defaultValue": "AzureResourcesWasteNotice",
      "metadata": {
        "description": "The name of the function app that you wish to create."
      }
    },
    "repoURL": {
      "type": "string",
      "defaultValue": "https://github.com/kheiakiyama/AzureResourcesWasteNotice.git"
    },
    "branch": {
      "type": "string",
      "defaultValue": "master"
    },
    "azureSubscriptionId" : {
      "type": "string",
      "metadata": {
        "description": "Target subscription id. (e.g. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX)"
      }
    },
    "azureTenant" : {
      "type": "string",
      "metadata": {
        "description": "Azure Active Directory tenant id exist of Service pricipal. (e.g. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX)"
      }
    },
    "azureClientId" : {
      "type": "string",
      "metadata": {
        "description": "Service Principal App Id. (e.g. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX)"
      }
    },
    "azureSecret" : {
      "type": "string",
      "metadata": {
        "description": "Service Principal Password. (e.g. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX)"
      }
    },
    "webhookUrl" : {
      "type": "string",
      "metadata": {
        "description": "AzureResourcesWasteNotice notify to this URL."
      }
    }
  },
  "variables": {
      "functionAppName": "[concat(parameters('appName'), uniquestring(resourceGroup().id))]",
      "hostingPlanName": "[concat(parameters('appName'), '-plan')]",
      "storageAccountName": "[concat(parameters('appName'), uniquestring(resourceGroup().id))]",
      "logicAppName": "[concat(parameters('appName'), '-trigger')]",
      "functionName": "HttpTriggerCSharp"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "2016-12-01",
      "location": "[resourceGroup().location]",
      "kind": "Storage",
      "sku": {
          "name": "Standard_LRS"
      }
    },
    {
      "apiVersion": "2015-08-01",
      "name": "[variables('hostingPlanName')]",
      "type": "Microsoft.Web/serverfarms",
      "location": "[resourceGroup().location]",
      "properties": {
      },
      "sku": {
        "name": "F1"
      }
    },
    {
      "apiVersion": "2015-08-01",
      "name": "[variables('functionAppName')]",
      "type": "Microsoft.Web/sites",
      "kind": "functionapp",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "properties": {
        "serverFarmId": "[variables('hostingPlanName')]"
      },
      "resources": [
        {
          "apiVersion": "2015-08-01",
          "name": "appsettings",
          "type": "config",
          "dependsOn": [
            "[resourceId('Microsoft.Web/Sites', variables('functionAppName'))]",
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
          ],
          "properties": {
            "AzureWebJobsStorage": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2015-05-01-preview').key1,';')]", 
            "AzureWebJobsDashboard": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2015-05-01-preview').key1,';')]", 
            "AZURE_SUBSCRIPTION_ID": "[parameters('azureSubscriptionId')]",
            "AZURE_TENANT": "[parameters('azureTenant')]",
            "AZURE_CLIENT_ID": "[parameters('azureClientId')]",
            "AZURE_SECRET": "[parameters('azureSecret')]",
            "FUNCTIONS_EXTENSION_VERSION": "beta",
            "WEBSITE_WEBDEPLOY_USE_SCM": "false"
          }
        },
        {
          "apiVersion": "2015-08-01",
          "name": "web",
          "type": "sourcecontrols",
          "dependsOn": [
            "[resourceId('Microsoft.Web/Sites', variables('functionAppName'))]",
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
            "[concat('Microsoft.Web/Sites/', variables('functionAppName'), '/config/appsettings')]"
          ],
          "properties": {
            "repoUrl": "[parameters('repoURL')]",
            "branch": "[parameters('branch')]",
            "IsManualIntegration": true
          }
        }
      ]
    },
    {
      "name": "[variables('logicAppName')]",
      "type": "Microsoft.Logic/workflows",
      "location": "[resourceGroup().location]",
      "apiVersion": "2016-06-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites/sourcecontrols', variables('functionAppName'), 'web')]"
      ],
      "properties": {
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "parameters": {},
          "triggers": {
            "Recurrence": {
              "recurrence": {
                "frequency": "Week",
                "interval": 1,
                "schedule": {
                  "hours": [
                    "9"
                  ],
                  "weekDays": [
                    "Monday"
                  ]
                },
                "timeZone": "UTC"
              },
              "type": "Recurrence"
            }
          },
          "actions": {
            "HTTP_Webhook": {
              "runAfter": {
                "[variables('functionName')]": [
                  "Succeeded"
                ]
              },
              "type": "HttpWebhook",
              "inputs": {
                "subscribe": {
                  "body": {
                    "text": "[concat('@body(''', variables('functionName'), ''')')]"
                  },
                  "method": "POST",
                  "uri": "[parameters('webhookUrl')]"
                },
                "unsubscribe": {}
              }
            },
            "[variables('functionName')]": {
              "type": "Function",
              "inputs": {
                "function": {
                  "id": "[resourceId('Microsoft.Web/sites/functions', variables('functionAppName'), variables('functionName'))]"
                },
                "method": "POST"
              },
              "runAfter": {}
            }
          },
          "contentVersion": "1.0.0.0",
          "outputs": {}
        },
        "parameters": {}
      }
    }
  ],
  "outputs": {
     "siteUri": {
       "type": "string",
       "value": "[concat('https://',reference(resourceId('Microsoft.Web/sites', variables('functionAppName'))).hostNames[0])]"
     }
  }
}